<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/bootstrap-5/css/bootstrap.min.css">
    <link rel="stylesheet" href="/fontawesome/fontawesome-free-6.3.0-web/css/all.min.css">
    <link rel="stylesheet" href="/stylesheets/home.css">
    <title>Fnews</title>
    <style>
        .text {
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            line-clamp: 2;
            -webkit-box-orient: vertical;
            text-overflow: ellipsis;
        }

        ::-webkit-scrollbar {
            display: none;
        }
    </style>
</head>

<body>
    <div class="container d-flex flex-column">

        <div class="container-fluid bg-light " style="z-index: 2;">
            <div class="container">
                <nav class="navbar navbar-expand-lg navbar-light bg-light">
                    <div class="container-fluid d-flex align-items-center">
                        <a class="navbar-brand fw-bold" style="color: #ff6200;" href="/">FNEWS</a>
                        <div class="d-flex justify-content-start flex-grow-1 ms-4 me-2 border-start ps-3"
                            style="border-color: rgb(17, 17, 17);">
                            <p id="time">Thứ 7, 13/4/2023</p>
                            <div class="d-flex flex-grow-1 justify-content-end  me-5">
                                <a href="#" onclick="refreshData()" class="text-dark"><i class="fa-solid fa-arrows-rotate"></i><span
                                        class="ms-2">Làm mới</span></a>
                            </div>
                        </div>
                        <form class="d-flex">
                            <div class="input-group">
                                <div class="form">
                                    <input id="search-input" type="search" id="form1" class="form-control"
                                        placeholder="Tìm kiếm" />
                                </div>
                                <button id="search-button" type="button" class="btn btn-primary">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </form>
                        <div class="d-flex ms-4 position-relative " style="z-index: 2;">
                            <i class="fas fa-user mt-1"></i>
                            <a href="/login" class="ms-2 position-relative" style="display: block;" id="username">Đăng
                                nhập</a>
                            <div id="info-popup" class="d-flex flex-column"
                                style="position: absolute; left: 0; top: 110%;z-index: 2;background: #fff; width: 200px; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2); visibility: hidden;">
                                <a href="/profile" class="my-2 px-2">Cá nhân</a>
                                <a style="cursor: pointer;" id="logout" class="my-2 px-2">Đăng xuất</a>
                            </div>
                        </div>
                    </div>
                </nav>
            </div>
        </div>

        <div class="d-flex flex-column overflow-auto mt-5">
            <div id="main-video" data-video-id="<%=id%>"
                class="w-75 mx-auto mb-5 d-flex flex-column justify-content-center" style="height: 550px;">
                <input id="video-id" type="hidden" value="<%=id%>">
                <div id="main-video-content" class="mx-auto"></div>
                <b id="main-video-title" class="mt-3 mx-auto" style="width: 80%;"></b>
                <div class="action d-flex align-items-center mt-3 mx-auto" style="width: 80%;">
                    <p class="me-5">Lượt xem: <span id="video-view">0</span></p>
                    <i style="cursor: pointer;" class="fa-regular fa-share-from-square me-4" id="news-share-action"
                        onclick="getShareLink(this)"></i>
                    <i style="cursor: pointer;" class="fa-regular fa-bookmark me-4" id="video-saved-action"
                        data-saved-video="0" onclick="savedVideo(this)"></i>
                </div>
            </div>
            <div id="more-video">

            </div>
        </div>

        <!-- Footer -->
        <div class="d-flex flex-column mt-4 mb-4">
            <div class="w-100" style="height: 10px; background: #ececec;"></div>
            <div class="d-flex justify-content-between mt-4">
                <div class="d-flex flex-column">
                    <a class="fw-bolder mb-1" href="#">Trang chủ</a>
                    <a class="fw-bolder mb-1" href="#">Video</a>
                </div>
                <div class="d-flex flex-column">
                    <a class="fw-bolder mb-1" href="#">Mới nhất</a>
                    <a class="fw-bolder mb-1" href="#">Xem nhiều</a>
                    <a class="fw-bolder mb-1" href="#">Tin nóng</a>
                </div>
                <div class="d-flex flex-column" id="field-footer">
                    <a class="fw-bolder mb-1" href="#">Tiêu điểm</a>
                    <a class="fw-bolder mb-1" href="#">Hoạt động</a>
                    <a class="fw-bolder mb-1" href="#">Cuộc thi</a>
                    <a class="fw-bolder mb-1" href="#">Tuyển sinh</a>
                    <a class="fw-bolder mb-1" href="#">Thể thao</a>
                    <a class="fw-bolder mb-1" href="#">Giao lưu</a>
                </div>
                <div class="d-flex flex-column w-25">
                    <p>Tải ứng dụng</p>
                    <a href="#" class="p-1 mt-2 mb-2"><i class="fa-solid fa-mobile me-2"></i>Fnews</a>
                    <p>Liên hệ chúng tôi</p>
                    <a href="#" class="p-1 mt-2 mb-2"><i class="fas fa-envelope me-2"></i>Tòa soạn</a>
                    <a href="#" class="p-1 mt-2 mb-2"><i class="fas fa-ad me-2"></i>Liên hệ quảng cáo</a>
                    <p>Đường dây nóng</p>
                    <p href="#" class="p-1 mt-2 mb-2"><i class="fas fa-phone me-2"></i>1900 8282</p>
                </div>
            </div>
            <div class="d-flex justify-content-between align-items-center border-top mt-2 pt-2 pb-2"
                style="border-color: #232323;">
                <p>Báo điện tử:
                    <a class="navbar-brand fw-bold fs-6 m-0 p-0" style="color: rgb(254, 80, 6);" href="/"><span
                            class="navbar-brand fw-bold fs-4 m-0" style="color: rgb(254, 80, 6);">F</span>NEWS</a>
                </p>
                <p>Theo dõi chúng tôi trên: <i class="fa-brands fa-facebook ms-2 me-2" style="color: #1842ff;"></i> <i
                        class="fa-brands fa-youtube" style="color: red;"></i></p>
            </div>
            <div class="d-flex flex-row justify-content-between border-top pt-3" style="border-color: #232323;">
                <div class="d-flex flex-column">
                    <p>Tổng biên tập: Phạm Hiếu</p>
                    <p>Địa chỉ: Tầng 10, Tòa A FPT Tower, số 10 Phạm Văn Bạch, Dịch Vọng, Cầu Giấy, Hà Nội</p>
                    <p>Điện thoại: 024 7300 8899 - máy lẻ 4500</p>
                </div>
                <p>© 1997-2023. Toàn bộ bản quyền thuộc Fnews</p>
            </div>
        </div>

        <!-- up arow -->
        <a href="#" class="position-fixed p-2 border border-1 border-success"
            style="bottom: 30px; right: 30px; border-radius: 10%;">
            <i class="fa-solid fa-circle-up fa-square-up" style="color: green;"></i>
        </a>

    </div>

    <script src="/javascripts/jquery.js"></script>
    <script src="/bootstrap-5/js/bootstrap.min.js"></script>
    <script src="https://www.youtube.com/iframe_api"></script>


    <script>
        function getTime() {
            var today = new Date();
            var day_name;
            switch (today.getDay()) {
                case 0:
                    day_name = "Chủ nhật";
                    break;
                case 1:
                    day_name = "Thứ hai";
                    break;
                case 2:
                    day_name = "Thứ ba";
                    break;
                case 3:
                    day_name = "Thứ tư";
                    break;
                case 4:
                    day_name = "Thứ năm";
                    break;
                case 5:
                    day_name = "Thứ sau";
                    break;
                case 6:
                    day_name = "Thứ bảy";
            }

            return day_name + ', ' + today.getDate() + '/' + (today.getMonth() + 1) + '/' + today.getFullYear();
        }

        function getCookie(name) {
            function escape(s) { return s.replace(/([.*+?\^$(){}|\[\]\/\\])/g, '\\$1'); }
            var match = document.cookie.match(RegExp('(?:^|;\\s*)' + escape(name) + '=([^;]*)'));
            return match ? match[1] : null;
        }

        function delete_cookie(name) {
            document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        }

        function loadUserData() {
            $.ajax({
                url: 'http://localhost:3000/auth/auto-login',
                beforeSend: function (request) {
                    console.log("Bearer " + getCookie("Authorization"))
                    request.setRequestHeader("Authorization", "Bearer " + getCookie("Authorization"));
                },
                type: 'POST',
                data: {},
                success: (data, textStatus, request) => {
                    if (data.success === true) {
                        $('#username').text(data.data.display_name)
                        $('#username').removeAttr('href')
                        $('#username').mouseenter(function () {
                            const popup = document.getElementById('info-popup');
                            if (popup.style.visibility === 'hidden') {
                                popup.style.visibility = 'visible'
                            } else {
                                popup.style.visibility = 'hidden'
                            }
                        })
                    }
                },
                error: (request, status, err) => {
                    console.log(status + err)
                }

            });
        }

        function extracTime(timestamp) {
            let timeAgo = Date.now() - timestamp;
            let minute = 60 * 1000;
            let hour = minute * 60;
            let day = hour * 24;

            let minutesAgo = Math.floor(timeAgo / minute);
            let hoursAgo = Math.floor(timeAgo / hour);
            let daysAgo = Math.floor(timeAgo / day);

            if (daysAgo > 0) {
                return `${daysAgo} ngày trước`
            } else if (hoursAgo > 0) {
                return `${hoursAgo} giờ trước`
            } else if (minutesAgo > 0) {
                return `${minutesAgo} phút trước`
            } else {
                return 'Vừa xong'
            }
        }

        // call
        $(document).ready(() => {
            loadUserData()

        });

        $("#time").text(getTime())

        $("#logout").click(() => {
            if (confirm("Bạn có muốn đăng xuất?") === true) {
                delete_cookie('Authorization')
                window.location.reload();
            }
        })

    </script>

    <script>

        function getCookie(name) {
            function escape(s) { return s.replace(/([.*+?\^$(){}|\[\]\/\\])/g, '\\$1'); }
            var match = document.cookie.match(RegExp('(?:^|;\\s*)' + escape(name) + '=([^;]*)'));
            return match ? match[1] : null;
        }

        function extracTime(timestamp) {
            let timeAgo = Date.now() - timestamp;
            let minute = 60 * 1000;
            let hour = minute * 60;
            let day = hour * 24;

            let minutesAgo = Math.floor(timeAgo / minute);
            let hoursAgo = Math.floor(timeAgo / hour);
            let daysAgo = Math.floor(timeAgo / day);

            if (daysAgo > 0) {
                return `${daysAgo} ngày trước`
            } else if (hoursAgo > 0) {
                return `${hoursAgo} giờ trước`
            } else if (minutesAgo > 0) {
                return `${minutesAgo} phút trước`
            } else {
                return 'Vừa xong'
            }
        }

        let videoMap = new Map();

        function onYouTubeIframeAPIReady() {
            getMainVideo()
        }


        function getMainVideo() {
            $.ajax({
                url: '/video/' + $('#video-id').val(),
                type: 'get',
                success: (data) => {
                    if (data.success) {
                        const video = data.data
                        const content = video.content.split('/')[3]
                        $('#main-video-title').text(video.title)
                        $('#video-view').text(video.view)

                        // youtube controller
                        const player = new YT.Player('main-video-content', {
                            height: '100%',
                            width: '80%',
                            videoId: content,
                            playerVars: {
                                'mute': 1,
                                'autoplay': 1,
                                'origin': 'http://localhost:8100'
                            },
                            events: {
                                'onReady': (event) => {
                                    videoMap.get(video._id).played = false
                                    console.log("state " + videoMap.get(video._id).played)
                                },
                                'onStateChange': (event) => {
                                    if (event.data == YT.PlayerState.PLAYING) {
                                        onlyVideoPlaying(video._id)
                                        if (videoMap.get(video._id).played == false) {
                                            videoMap.get(video._id).played = true
                                            setTimeout(setSeenVideos(videoMap.get(video._id).id), 1000)
                                            setTimeout(increaseViewOfVideo(videoMap.get(video._id).id, 1000))
                                            console.log("state " + videoMap.get(video._id).played)
                                        }
                                    } else if (event.data == YT.PlayerState.ENDED) {
                                        videoMap.get(video._id).played = false
                                        console.log("state " + videoMap.get(video._id).played)
                                        videoMap.get(video._id).player.playVideo()
                                    }
                                }
                            }
                        });

                        videoMap.set(video._id, { id: video._id, player: player, played: false })
                    } else {
                        console.log(data.message)
                    }
                }
            })
        }



        let savedVideoList

        $.ajax({
            url: '/user/saved-video',
            type: 'get',
            beforeSend: function (request) {
                request.setRequestHeader("Authorization", "Bearer " + getCookie("Authorization"));
            },
            success: (data) => {
                if (data.success) {
                    savedVideoList = data.data
                    console.log(savedVideoList)
                    getMoreVideo()
                }
            },
            error: (req, sts, err) => {
                console.log(err)
            }
        })

        function getMoreVideo() {
            var page = 0
            $('#more-video').empty()
            $.ajax({
                url: `/video/get-video-for-video-page?page=${page}&per_page=5`,
                type: 'get',
                success: (data) => {
                    if (data.success) {
                        data.data.videos.forEach(element => {
                            if (element._id != $('#video-id').val()) {
                                const content = element.content.split('/')[3]
                                $('#more-video').append(
                                    `<div id="video-${element._id}" data-video-id="${element._id}" class="w-75 mb-5 mx-auto d-flex flex-column"
                                        style="height: 550px;">
                                        <div id="video-content-${element._id}" class="mx-auto"></div>
                                        <b id="video-title" class="mt-3 mx-auto" style="width: 80%;">${element.title}</b>
                                        <div class="action d-flex align-items-center mt-3 mx-auto" style="width: 80%;">
                                            <p class="me-5">Lượt xem: <span id="video-view">${element.view}</span></p>
                                            <i style="cursor: pointer;" class="fa-regular fa-share-from-square me-4" id="news-share-action"
                                                onclick="getShareLink2(this)"></i>
                                            <i style="cursor: pointer;${savedVideoList.includes(element._id) ? 'color: #e67a00;' : ''}"
                                                class="${savedVideoList.includes(element._id) ? 'fa-solid' : 'fa-regular'} fa-bookmark me-4"
                                                id="video-saved-action" data-saved-video="${savedVideoList.includes(element._id) ? 1 : 0}"
                                                onclick="savedVideo2(this)"></i>
                                        </div>
                                    </div>`

                                )

                                const videoView = document.getElementById(`video-${element._id}`).querySelector('.action').querySelector('#video-view')

                                // youtube controller
                                const player = new YT.Player(`video-content-${element._id}`, {
                                    height: '100%',
                                    width: '80%',
                                    videoId: content,
                                    playerVars: {
                                        'origin': 'http://localhost:8100'
                                    },
                                    events: {
                                        'onReady': (event) => {
                                            videoMap.get(element._id).played = false
                                            console.log("state " + videoMap.get(element._id).played)
                                        },
                                        'onStateChange': (event) => {
                                            if (event.data == YT.PlayerState.PLAYING) {
                                                onlyVideoPlaying(element._id)
                                                if (videoMap.get(element._id).played == false) {
                                                    videoMap.get(element._id).played = true
                                                    setTimeout(setSeenVideos(videoMap.get(element._id).id), 1000)
                                                    setTimeout(increaseViewOfVideo(videoMap.get(element._id).id, videoView), 1000)
                                                    console.log("state " + videoMap.get(element._id).played)
                                                }
                                            } else if (event.data == YT.PlayerState.ENDED) {
                                                videoMap.get(element._id).played = false
                                                console.log("state " + videoMap.get(element._id).played)
                                                videoMap.get(element._id).player.playVideo()
                                            }
                                        }
                                    }
                                });

                                videoMap.set(element._id, { id: element._id, player: player, played: false })
                            }
                        });




                    }
                }
            })
        }

        function onlyVideoPlaying(ignoreId) {
            videoMap.forEach((value, key) => {
                if (value.id != ignoreId) {
                    value.player.stopVideo()
                }
            })
        }

        function increaseViewOfVideo(id, videoView) {
            $.ajax({
                url: '/video/increase-view',
                type: 'put',
                data: { videoId: id },
                success: (data) => {
                    if (data.success) {
                        $(videoView).text(data.data)
                    } else {
                        console.log(data.message)
                    }
                }
            })
        }

        function setSeenVideos(id) {
            console.log('set ' + id)
            $.ajax({
                url: '/user/seen-video',
                type: 'put',
                data: { videoId: id },
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + getCookie("Authorization"));
                },
                success: (data) => {
                    if (data.success) {
                        console.log('update ' + data.data)
                    } else {
                        console.log(data.message)
                    }
                }
            })
        }


        function getSavedVideo() {
            const id = $('#video-id').val()
            $.ajax({
                url: '/user/saved-video?video_id=' + id,
                type: 'get',
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + getCookie("Authorization"));
                },
                success: (data) => {
                    console.log("get saved video: " + data.data)
                    if (data.success) {
                        if (data.data == true) {
                            $('#video-saved-action').removeClass('fa-regular').addClass('fa-solid')
                            $('#video-saved-action').css('color', '#e67a00')
                            $('#video-saved-action').attr('data-saved-video', 1)
                        }
                    }
                },
                error: (req, sts, err) => {
                    console.log(err)
                }
            })
        }

        getSavedVideo()




        function savedVideo(event) {
            const saved = $(event).attr('data-saved-video') == 1
            console.log('input saved news: ' + !saved)
            $.ajax({
                url: '/user/saved-video',
                type: 'put',
                data: { saved: !saved, video_id: $('#video-id').val() },
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + getCookie("Authorization"));
                },
                success: (data) => {
                    console.log('saved video: ' + data.data)
                    if (data.success) {
                        if (data.data == true) {
                            $('#video-saved-action').removeClass('fa-regular').addClass('fa-solid')
                            $('#video-saved-action').css('color', '#e67a00')
                            $('#video-saved-action').attr('data-saved-video', 1)
                        } else {
                            $('#video-saved-action').addClass('fa-regular').removeClass('fa-solid')
                            $('#video-saved-action').css('color', '')
                            $('#video-saved-action').attr('data-saved-video', 0)
                        }
                    }
                }
            })
        }

        function savedVideo2(event) {
            const saved = $(event).attr('data-saved-video') == 1
            const video_id = event.parentElement.parentElement.getAttribute('data-video-id')
            console.log('input saved news: ' + !saved + ' video id: ' + video_id)
            $.ajax({
                url: '/user/saved-video',
                type: 'put',
                data: { saved: !saved, video_id: video_id },
                beforeSend: function (request) {
                    request.setRequestHeader("Authorization", "Bearer " + getCookie("Authorization"));
                },
                success: (data) => {
                    console.log('saved video: ' + data.data)
                    if (data.success) {
                        if (data.data == true) {
                            $(event).removeClass('fa-regular').addClass('fa-solid')
                            $(event).css('color', '#e67a00')
                            $(event).attr('data-saved-video', 1)
                        } else {
                            $(event).addClass('fa-regular').removeClass('fa-solid')
                            $(event).css('color', '')
                            $(event).attr('data-saved-video', 0)
                        }
                    }
                }
            })
        }

        function getShareLink(event) {
            $(event).css('color', '#e67a00')
            setTimeout(function () {
                $(event).css('color', '')
            }, 500);
            navigator.permissions.query({ name: 'clipboard-write' }).then(result => {
                if (result.state === 'granted' || result.state === 'prompt') {
                    // Lấy thông tin cần sao chép
                    const textToCopy = 'http://localhost:3000/video-view/' + $('#video-id').val();

                    // Sao chép thông tin vào bộ nhớ đệm
                    navigator.clipboard.writeText(textToCopy).then(() => {
                        console.log('Đã sao chép nội dung vào bộ nhớ đệm');
                    }).catch(error => {
                        console.error('Lỗi khi sao chép nội dung vào bộ nhớ đệm:', error);
                    });
                }
            });
        }

        function getShareLink2(event) {
            $(event).css('color', '#e67a00')
            setTimeout(function () {
                $(event).css('color', '')
            }, 500);
            navigator.permissions.query({ name: 'clipboard-write' }).then(result => {
                if (result.state === 'granted' || result.state === 'prompt') {
                    // Lấy thông tin cần sao chép
                    const video_id = event.parentElement.parentElement.getAttribute('data-video-id')
                    const textToCopy = 'http://localhost:3000/video-view/' + video_id;

                    // Sao chép thông tin vào bộ nhớ đệm
                    navigator.clipboard.writeText(textToCopy).then(() => {
                        console.log('Đã sao chép nội dung vào bộ nhớ đệm');
                    }).catch(error => {
                        console.error('Lỗi khi sao chép nội dung vào bộ nhớ đệm:', error);
                    });
                }
            });
        }

        function refreshData() {
            videoMap = new Map()
            onYouTubeIframeAPIReady()
            getMoreVideo()
        }

    </script>

</body>

</html>